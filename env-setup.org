#+TITLE: Environment Setup
#+AUTHOR: Aidan Pace
#+EMAIL: apace@defrecord.com
#+PROPERTY: header-args :mkdirp yes

* Environment Configuration Files

This file manages environment configurations for isolated-pymcp.

* Emacs Configuration
:PROPERTIES:
:header-args: :tangle .dir-locals.el
:END:

#+BEGIN_SRC emacs-lisp
((nil . ((fill-column . 100)
         (indent-tabs-mode . nil)))
 (org-mode . ((org-confirm-babel-evaluate . nil)))
 (python-mode . ((python-indent-offset . 4))))
#+END_SRC

* MCP Helper Functions
:PROPERTIES:
:header-args: :tangle emacs/mcp-helpers.el
:END:

#+BEGIN_SRC emacs-lisp
;;; mcp-helpers.el --- MCP integration helpers

;;; Code:
(require 'mcp)

(defun mcp-connect-servers ()
  "Connect to MCP servers from environment variables."
  (interactive)
  (mcp-add-server "run-python" (getenv "MCP_RUNPYTHON_URL"))
  (mcp-add-server "multilspy" (getenv "MCP_MULTILSPY_URL"))
  (message "Connected to MCP servers"))

(defun mcp-run-buffer ()
  "Run current buffer with MCP run-python."
  (interactive)
  (let ((code (buffer-substring-no-properties (point-min) (point-max))))
    (mcp-execute "run-python" "run" 
                 `(("code" . ,code))
                 #'mcp-display-result)))

(defun mcp-display-result (result)
  "Display RESULT in buffer."
  (with-current-buffer (get-buffer-create "*MCP Result*")
    (erase-buffer)
    (insert result)
    (pop-to-buffer (current-buffer))))

(provide 'mcp-helpers)
;;; mcp-helpers.el ends here
#+END_SRC

* Claude Configuration
:PROPERTIES:
:header-args: :tangle .claude/preferences.json
:END:

#+BEGIN_SRC json
{
  "defaultModel": "claude-3-7-sonnet-20250219",
  "pythonInspection": {
    "enableLinting": true,
    "enableTypeChecking": true
  },
  "securityAnalysis": true
}
#+END_SRC
