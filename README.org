#+TITLE: isolated-pymcp
#+AUTHOR: Aidan Pace
#+EMAIL: apace@defrecord.com
#+DATE: 2025-04-20

A secure, isolated environment for exploring Python development with Model Context Protocol (MCP) and Language Server Protocol (LSP).

** Overview

This project creates an isolated container environment that combines MCP and LSP capabilities for Python development. By leveraging the complementary strengths of both protocols, we enable LLMs to access powerful code intelligence features while maintaining strict security boundaries.

** Architecture

#+BEGIN_SRC mermaid :file architecture.png
graph TD
    subgraph "Host System"
        api_keys[API Keys]
    end
    
    subgraph "Alpine Container"
        subgraph "MCP Servers"
            run_python[Pydantic Run-Python]
            multilspy[MultilspyLSP]
            pythonlsp[Python LSP Server]
        end
        
        subgraph "Client Tools"
            claude_cli[Claude Code CLI]
            shell_scripts[Shell Scripts]
            emacs[Emacs + mcp.el]
        end
        
        subgraph "Python Algorithms"
            algorithms[Test Algorithms]
        end
    end
    
    api_keys --> Alpine Container
    run_python --> algorithms
    multilspy --> pythonlsp
    pythonlsp --> algorithms
    
    claude_cli --> run_python
    claude_cli --> multilspy
    shell_scripts --> run_python
    shell_scripts --> multilspy
    emacs --> run_python
    emacs --> multilspy
#+END_SRC

** Security Model

The project implements a principle of least access architecture:

- Container isolation from host system
- Non-root user execution within container
- Limited port exposure
- Controlled API access via environment variables
- Clear security domain boundaries between components

** Core Components

- *Pydantic Run-Python*: Executes Python code via MCP
- *MultilspyLSP*: Bridges LSP capabilities to MCP
- *Python LSP Server*: Provides code intelligence (completion, analysis, diagnostics)
- *Client Interfaces*: Multiple access methods with the same security model

** Integration Points

| Component      | Protocol | Function                                |
|----------------|----------|----------------------------------------|
| Run-Python     | MCP      | Code execution and output capture       |
| MultilspyLSP   | MCP+LSP  | Code intelligence bridge               |
| Python LSP     | LSP      | Static analysis and completion         |
| Claude Code    | -        | AI-assisted analysis and exploration    |

** Getting Started

1. Initial setup:

#+BEGIN_SRC shell
# Create required directories
make dirs

# Generate configuration files from org sources
make tangle

# Create environment configuration (edit with your API keys)
cp .envrc.example .envrc
#+END_SRC

2. Build and run the container:

#+BEGIN_SRC shell
# Build the Docker/Podman image
make build

# Run the container with mounted volumes
make run
#+END_SRC

3. Test the environment:

#+BEGIN_SRC shell
# Verify MCP server connectivity
make test

# Try analyzing an algorithm (after creating one)
make analyze ALGO=fibonacci
#+END_SRC

** Command Reference

Run ~make~ for a full list of available commands.

Key commands:
- ~make test~ - Verify MCP server connectivity
- ~make analyze ALGO=fibonacci~ - Analyze algorithm via MCP
- ~make claude-analyze ALGO=fibonacci~ - Use Claude to analyze code
- ~make tangle~ - Generate config files from org sources
- ~make detangle~ - Update org files from modified configs

The project uses literate programming with org-mode. Configuration files are generated from
~env-setup.org~ using the tangle process. If you modify generated files directly, use detangle
to propagate changes back to the org source.

** Development Workflow

This project follows a literate programming approach with org-mode. Key development files:

- ~env-setup.org~ - Contains configuration for Emacs, VSCode, and Claude Code
- ~SETUP.org~ - Contains general setup instructions and documentation
- ~Makefile~ - Provides automation for common development tasks

When making changes:

1. For configuration: Edit the org files and run ~make tangle~
2. For implementation: Follow standard Git workflow with conventional commits
3. For testing: Add algorithms to ~algorithms/~ directory and use ~make analyze~

** Project Goals

1. Demonstrate secure integration between MCP and LSP
2. Provide a reference architecture for isolated AI code analysis
3. Enable exploration of Python algorithm implementations
4. Support multiple client interfaces while maintaining security

** License

MIT License
